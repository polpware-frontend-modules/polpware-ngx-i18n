import { EventEmitter } from "@angular/core";
import { of } from "rxjs";
/* On purpose we do not make it injectable.
   It is up to the host to define how to do this */
export class NgxTranslatorImplService {
    constructor() {
        this._dict = {};
        this.onTranslationChange = new EventEmitter();
        this.onLangChange = new EventEmitter();
        this.onDefaultLangChange = new EventEmitter();
        this.defaultLang = '';
        this.currentLang = '';
        this.langs = [];
    }
    getParsedResult(translations, key, interpolateParams) {
        return key;
    }
    get(key, interpolateParams) {
        // Get
        let ks = [];
        if (typeof key == 'string') {
            ks = key.split('.');
        }
        else {
            ks = key;
        }
        ks = ks.filter(a => a);
        let res = this._dict;
        for (let i = 0; i < ks.length; i++) {
            const c = ks[i];
            if (res[c]) {
                res = res[c];
            }
            else {
                res = undefined;
                break;
            }
        }
        const v = res !== undefined ? res : key;
        return of(v);
    }
    loadResources(resources) {
        // todo: A better implementation
        Object.assign(this._dict, resources);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LXRyYW5zbGF0b3ItaW1wbC5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHBvbHB3YXJlL25neC1pMThuLyIsInNvdXJjZXMiOlsibGliL3NlcnZpY2VzL25neC10cmFuc2xhdG9yLWltcGwuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzdDLE9BQU8sRUFBYyxFQUFFLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFJdEM7bURBQ21EO0FBRW5ELE1BQU0sT0FBTyx3QkFBd0I7SUFBckM7UUFHWSxVQUFLLEdBQTJCLEVBQUUsQ0FBQztRQUUzQyx3QkFBbUIsR0FBeUMsSUFBSSxZQUFZLEVBQTBCLENBQUM7UUFDdkcsaUJBQVksR0FBa0MsSUFBSSxZQUFZLEVBQW1CLENBQUM7UUFDbEYsd0JBQW1CLEdBQXlDLElBQUksWUFBWSxFQUEwQixDQUFDO1FBRXZHLGdCQUFXLEdBQUcsRUFBRSxDQUFDO1FBRWpCLGdCQUFXLEdBQUcsRUFBRSxDQUFDO1FBRWpCLFVBQUssR0FBRyxFQUFFLENBQUM7SUFxQ2YsQ0FBQztJQW5DVSxlQUFlLENBQUMsWUFBaUIsRUFBRSxHQUFRLEVBQUUsaUJBQTBCO1FBQzFFLE9BQU8sR0FBRyxDQUFDO0lBQ2YsQ0FBQztJQUVNLEdBQUcsQ0FBQyxHQUEyQixFQUFFLGlCQUEwQjtRQUM5RCxNQUFNO1FBQ04sSUFBSSxFQUFFLEdBQWtCLEVBQUUsQ0FBQztRQUMzQixJQUFJLE9BQU8sR0FBRyxJQUFJLFFBQVEsRUFBRTtZQUN4QixFQUFFLEdBQUcsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztTQUN2QjthQUFNO1lBQ0gsRUFBRSxHQUFHLEdBQW9CLENBQUM7U0FDN0I7UUFFRCxFQUFFLEdBQUcsRUFBRSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBRXZCLElBQUksR0FBRyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUM7UUFDckIsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUU7WUFDaEMsTUFBTSxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ2hCLElBQUksR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFO2dCQUNSLEdBQUcsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7YUFDaEI7aUJBQ0k7Z0JBQ0QsR0FBRyxHQUFHLFNBQVMsQ0FBQztnQkFDaEIsTUFBTTthQUNUO1NBQ0o7UUFFRCxNQUFNLENBQUMsR0FBRyxHQUFHLEtBQUssU0FBUyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQztRQUN4QyxPQUFPLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNqQixDQUFDO0lBRU0sYUFBYSxDQUFDLFNBQWlDO1FBQ2xELGdDQUFnQztRQUNoQyxNQUFNLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsU0FBUyxDQUFDLENBQUM7SUFDekMsQ0FBQztDQUNKIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRXZlbnRFbWl0dGVyIH0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcbmltcG9ydCB7IE9ic2VydmFibGUsIG9mIH0gZnJvbSBcInJ4anNcIjtcbmltcG9ydCB7IERlZmF1bHRMYW5nQ2hhbmdlRXZlbnQsIElOZ3hUcmFuc2xhdG9yLCBMYW5nQ2hhbmdlRXZlbnQsIFRyYW5zbGF0aW9uQ2hhbmdlRXZlbnQgfSBmcm9tICcuLi9pbnRlcmZhY2VzL25neC10cmFuc2xhdG9yLmludGVyZmFjZSc7XG5cblxuLyogT24gcHVycG9zZSB3ZSBkbyBub3QgbWFrZSBpdCBpbmplY3RhYmxlLiBcbiAgIEl0IGlzIHVwIHRvIHRoZSBob3N0IHRvIGRlZmluZSBob3cgdG8gZG8gdGhpcyAqL1xuXG5leHBvcnQgY2xhc3MgTmd4VHJhbnNsYXRvckltcGxTZXJ2aWNlIGltcGxlbWVudHMgSU5neFRyYW5zbGF0b3Ige1xuXG5cbiAgICBwcml2YXRlIF9kaWN0OiB7IFtrZXk6IHN0cmluZ106IGFueSB9ID0ge307XG5cbiAgICBvblRyYW5zbGF0aW9uQ2hhbmdlOiBFdmVudEVtaXR0ZXI8VHJhbnNsYXRpb25DaGFuZ2VFdmVudD4gPSBuZXcgRXZlbnRFbWl0dGVyPFRyYW5zbGF0aW9uQ2hhbmdlRXZlbnQ+KCk7XG4gICAgb25MYW5nQ2hhbmdlOiBFdmVudEVtaXR0ZXI8TGFuZ0NoYW5nZUV2ZW50PiA9IG5ldyBFdmVudEVtaXR0ZXI8TGFuZ0NoYW5nZUV2ZW50PigpO1xuICAgIG9uRGVmYXVsdExhbmdDaGFuZ2U6IEV2ZW50RW1pdHRlcjxEZWZhdWx0TGFuZ0NoYW5nZUV2ZW50PiA9IG5ldyBFdmVudEVtaXR0ZXI8RGVmYXVsdExhbmdDaGFuZ2VFdmVudD4oKTtcblxuICAgIGRlZmF1bHRMYW5nID0gJyc7XG5cbiAgICBjdXJyZW50TGFuZyA9ICcnO1xuXG4gICAgbGFuZ3MgPSBbXTtcblxuICAgIHB1YmxpYyBnZXRQYXJzZWRSZXN1bHQodHJhbnNsYXRpb25zOiBhbnksIGtleTogYW55LCBpbnRlcnBvbGF0ZVBhcmFtcz86IE9iamVjdCk6IGFueSB7XG4gICAgICAgIHJldHVybiBrZXk7XG4gICAgfVxuXG4gICAgcHVibGljIGdldChrZXk6IHN0cmluZyB8IEFycmF5PHN0cmluZz4sIGludGVycG9sYXRlUGFyYW1zPzogT2JqZWN0KTogT2JzZXJ2YWJsZTxzdHJpbmcgfCBhbnk+IHtcbiAgICAgICAgLy8gR2V0XG4gICAgICAgIGxldCBrczogQXJyYXk8c3RyaW5nPiA9IFtdO1xuICAgICAgICBpZiAodHlwZW9mIGtleSA9PSAnc3RyaW5nJykge1xuICAgICAgICAgICAga3MgPSBrZXkuc3BsaXQoJy4nKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGtzID0ga2V5IGFzIEFycmF5PHN0cmluZz47XG4gICAgICAgIH1cblxuICAgICAgICBrcyA9IGtzLmZpbHRlcihhID0+IGEpO1xuXG4gICAgICAgIGxldCByZXMgPSB0aGlzLl9kaWN0O1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGtzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBjb25zdCBjID0ga3NbaV07XG4gICAgICAgICAgICBpZiAocmVzW2NdKSB7XG4gICAgICAgICAgICAgICAgcmVzID0gcmVzW2NdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgcmVzID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgdiA9IHJlcyAhPT0gdW5kZWZpbmVkID8gcmVzIDoga2V5O1xuICAgICAgICByZXR1cm4gb2Yodik7XG4gICAgfVxuXG4gICAgcHVibGljIGxvYWRSZXNvdXJjZXMocmVzb3VyY2VzOiB7IFtrZXk6IHN0cmluZ106IGFueSB9KSB7XG4gICAgICAgIC8vIHRvZG86IEEgYmV0dGVyIGltcGxlbWVudGF0aW9uXG4gICAgICAgIE9iamVjdC5hc3NpZ24odGhpcy5fZGljdCwgcmVzb3VyY2VzKTtcbiAgICB9XG59XG4iXX0=