import { EventEmitter } from "@angular/core";
import { of } from "rxjs";
import { lookupDeeply } from './utils';
/* On purpose we do not make it injectable.
   It is up to the host to define how to do this */
export class NgxTranslatorImplService {
    constructor() {
        this._dict = {};
        this.onTranslationChange = new EventEmitter();
        this.onLangChange = new EventEmitter();
        this.onDefaultLangChange = new EventEmitter();
        this.defaultLang = '';
        this.currentLang = '';
        this.langs = [];
    }
    getParsedResult(translations, key, interpolateParams) {
        return key;
    }
    get(key, interpolateParams) {
        const v = lookupDeeply(this._dict, key, interpolateParams);
        return of(v);
    }
    loadResources(resources) {
        // todo: A better implementation
        Object.assign(this._dict, resources);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LXRyYW5zbGF0b3ItaW1wbC5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHBvbHB3YXJlL25neC1pMThuLyIsInNvdXJjZXMiOlsibGliL3NlcnZpY2VzL25neC10cmFuc2xhdG9yLWltcGwuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzdDLE9BQU8sRUFBYyxFQUFFLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFFdEMsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLFNBQVMsQ0FBQztBQUd2QzttREFDbUQ7QUFFbkQsTUFBTSxPQUFPLHdCQUF3QjtJQUFyQztRQUdZLFVBQUssR0FBMkIsRUFBRSxDQUFDO1FBRTNDLHdCQUFtQixHQUF5QyxJQUFJLFlBQVksRUFBMEIsQ0FBQztRQUN2RyxpQkFBWSxHQUFrQyxJQUFJLFlBQVksRUFBbUIsQ0FBQztRQUNsRix3QkFBbUIsR0FBeUMsSUFBSSxZQUFZLEVBQTBCLENBQUM7UUFFdkcsZ0JBQVcsR0FBRyxFQUFFLENBQUM7UUFFakIsZ0JBQVcsR0FBRyxFQUFFLENBQUM7UUFFakIsVUFBSyxHQUFHLEVBQUUsQ0FBQztJQWVmLENBQUM7SUFiVSxlQUFlLENBQUMsWUFBaUIsRUFBRSxHQUFRLEVBQUUsaUJBQTBCO1FBQzFFLE9BQU8sR0FBRyxDQUFDO0lBQ2YsQ0FBQztJQUVNLEdBQUcsQ0FBQyxHQUEyQixFQUFFLGlCQUEwQjtRQUM5RCxNQUFNLENBQUMsR0FBRyxZQUFZLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxHQUFHLEVBQUUsaUJBQWlCLENBQUMsQ0FBQztRQUMzRCxPQUFPLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNqQixDQUFDO0lBRU0sYUFBYSxDQUFDLFNBQWlDO1FBQ2xELGdDQUFnQztRQUNoQyxNQUFNLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsU0FBUyxDQUFDLENBQUM7SUFDekMsQ0FBQztDQUNKIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRXZlbnRFbWl0dGVyIH0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcbmltcG9ydCB7IE9ic2VydmFibGUsIG9mIH0gZnJvbSBcInJ4anNcIjtcbmltcG9ydCB7IERlZmF1bHRMYW5nQ2hhbmdlRXZlbnQsIElOZ3hUcmFuc2xhdG9yLCBMYW5nQ2hhbmdlRXZlbnQsIFRyYW5zbGF0aW9uQ2hhbmdlRXZlbnQgfSBmcm9tICcuLi9pbnRlcmZhY2VzL25neC10cmFuc2xhdG9yLmludGVyZmFjZSc7XG5pbXBvcnQgeyBsb29rdXBEZWVwbHkgfSBmcm9tICcuL3V0aWxzJztcblxuXG4vKiBPbiBwdXJwb3NlIHdlIGRvIG5vdCBtYWtlIGl0IGluamVjdGFibGUuIFxuICAgSXQgaXMgdXAgdG8gdGhlIGhvc3QgdG8gZGVmaW5lIGhvdyB0byBkbyB0aGlzICovXG5cbmV4cG9ydCBjbGFzcyBOZ3hUcmFuc2xhdG9ySW1wbFNlcnZpY2UgaW1wbGVtZW50cyBJTmd4VHJhbnNsYXRvciB7XG5cblxuICAgIHByaXZhdGUgX2RpY3Q6IHsgW2tleTogc3RyaW5nXTogYW55IH0gPSB7fTtcblxuICAgIG9uVHJhbnNsYXRpb25DaGFuZ2U6IEV2ZW50RW1pdHRlcjxUcmFuc2xhdGlvbkNoYW5nZUV2ZW50PiA9IG5ldyBFdmVudEVtaXR0ZXI8VHJhbnNsYXRpb25DaGFuZ2VFdmVudD4oKTtcbiAgICBvbkxhbmdDaGFuZ2U6IEV2ZW50RW1pdHRlcjxMYW5nQ2hhbmdlRXZlbnQ+ID0gbmV3IEV2ZW50RW1pdHRlcjxMYW5nQ2hhbmdlRXZlbnQ+KCk7XG4gICAgb25EZWZhdWx0TGFuZ0NoYW5nZTogRXZlbnRFbWl0dGVyPERlZmF1bHRMYW5nQ2hhbmdlRXZlbnQ+ID0gbmV3IEV2ZW50RW1pdHRlcjxEZWZhdWx0TGFuZ0NoYW5nZUV2ZW50PigpO1xuXG4gICAgZGVmYXVsdExhbmcgPSAnJztcblxuICAgIGN1cnJlbnRMYW5nID0gJyc7XG5cbiAgICBsYW5ncyA9IFtdO1xuXG4gICAgcHVibGljIGdldFBhcnNlZFJlc3VsdCh0cmFuc2xhdGlvbnM6IGFueSwga2V5OiBhbnksIGludGVycG9sYXRlUGFyYW1zPzogT2JqZWN0KTogYW55IHtcbiAgICAgICAgcmV0dXJuIGtleTtcbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0KGtleTogc3RyaW5nIHwgQXJyYXk8c3RyaW5nPiwgaW50ZXJwb2xhdGVQYXJhbXM/OiBPYmplY3QpOiBPYnNlcnZhYmxlPHN0cmluZyB8IGFueT4ge1xuICAgICAgICBjb25zdCB2ID0gbG9va3VwRGVlcGx5KHRoaXMuX2RpY3QsIGtleSwgaW50ZXJwb2xhdGVQYXJhbXMpO1xuICAgICAgICByZXR1cm4gb2Yodik7XG4gICAgfVxuXG4gICAgcHVibGljIGxvYWRSZXNvdXJjZXMocmVzb3VyY2VzOiB7IFtrZXk6IHN0cmluZ106IGFueSB9KSB7XG4gICAgICAgIC8vIHRvZG86IEEgYmV0dGVyIGltcGxlbWVudGF0aW9uXG4gICAgICAgIE9iamVjdC5hc3NpZ24odGhpcy5fZGljdCwgcmVzb3VyY2VzKTtcbiAgICB9XG59XG4iXX0=