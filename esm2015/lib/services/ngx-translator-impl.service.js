import { EventEmitter } from "@angular/core";
import { of } from "rxjs";
import { lookupDeeply } from './utils';
/* On purpose we do not make it injectable.
   It is up to the host to define how to do this */
export class NgxTranslatorImplService {
    constructor() {
        this._dict = {};
        this.onTranslationChange = new EventEmitter();
        this.onLangChange = new EventEmitter();
        this.onDefaultLangChange = new EventEmitter();
        this.defaultLang = '';
        this.currentLang = '';
        this.langs = [];
    }
    getParsedResult(translations, key, interpolateParams) {
        return key;
    }
    get(key, interpolateParams) {
        const v = lookupDeeply(this._dict, key, interpolateParams);
        return of(v);
    }
    loadResources(resources) {
        // todo: A better implementation
        Object.assign(this._dict, resources);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LXRyYW5zbGF0b3ItaW1wbC5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHBvbHB3YXJlL25neC1pMThuLyIsInNvdXJjZXMiOlsibGliL3NlcnZpY2VzL25neC10cmFuc2xhdG9yLWltcGwuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzdDLE9BQU8sRUFBYyxFQUFFLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFFdEMsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLFNBQVMsQ0FBQztBQUd2QzttREFDbUQ7QUFFbkQsTUFBTSxPQUFPLHdCQUF3QjtJQUFyQztRQUdjLFVBQUssR0FBMkIsRUFBRSxDQUFDO1FBRTdDLHdCQUFtQixHQUF5QyxJQUFJLFlBQVksRUFBMEIsQ0FBQztRQUN2RyxpQkFBWSxHQUFrQyxJQUFJLFlBQVksRUFBbUIsQ0FBQztRQUNsRix3QkFBbUIsR0FBeUMsSUFBSSxZQUFZLEVBQTBCLENBQUM7UUFFdkcsZ0JBQVcsR0FBRyxFQUFFLENBQUM7UUFFakIsZ0JBQVcsR0FBRyxFQUFFLENBQUM7UUFFakIsVUFBSyxHQUFHLEVBQUUsQ0FBQztJQWVmLENBQUM7SUFiVSxlQUFlLENBQUMsWUFBaUIsRUFBRSxHQUFRLEVBQUUsaUJBQTBCO1FBQzFFLE9BQU8sR0FBRyxDQUFDO0lBQ2YsQ0FBQztJQUVNLEdBQUcsQ0FBQyxHQUEyQixFQUFFLGlCQUEwQjtRQUM5RCxNQUFNLENBQUMsR0FBRyxZQUFZLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxHQUFHLEVBQUUsaUJBQWlCLENBQUMsQ0FBQztRQUMzRCxPQUFPLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNqQixDQUFDO0lBRU0sYUFBYSxDQUFDLFNBQWlDO1FBQ2xELGdDQUFnQztRQUNoQyxNQUFNLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsU0FBUyxDQUFDLENBQUM7SUFDekMsQ0FBQztDQUNKIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRXZlbnRFbWl0dGVyIH0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcbmltcG9ydCB7IE9ic2VydmFibGUsIG9mIH0gZnJvbSBcInJ4anNcIjtcbmltcG9ydCB7IERlZmF1bHRMYW5nQ2hhbmdlRXZlbnQsIElOZ3hUcmFuc2xhdG9yLCBMYW5nQ2hhbmdlRXZlbnQsIFRyYW5zbGF0aW9uQ2hhbmdlRXZlbnQgfSBmcm9tICcuLi9pbnRlcmZhY2VzL25neC10cmFuc2xhdG9yLmludGVyZmFjZSc7XG5pbXBvcnQgeyBsb29rdXBEZWVwbHkgfSBmcm9tICcuL3V0aWxzJztcblxuXG4vKiBPbiBwdXJwb3NlIHdlIGRvIG5vdCBtYWtlIGl0IGluamVjdGFibGUuIFxuICAgSXQgaXMgdXAgdG8gdGhlIGhvc3QgdG8gZGVmaW5lIGhvdyB0byBkbyB0aGlzICovXG5cbmV4cG9ydCBjbGFzcyBOZ3hUcmFuc2xhdG9ySW1wbFNlcnZpY2UgaW1wbGVtZW50cyBJTmd4VHJhbnNsYXRvciB7XG5cblxuICAgIHByb3RlY3RlZCBfZGljdDogeyBba2V5OiBzdHJpbmddOiBhbnkgfSA9IHt9O1xuXG4gICAgb25UcmFuc2xhdGlvbkNoYW5nZTogRXZlbnRFbWl0dGVyPFRyYW5zbGF0aW9uQ2hhbmdlRXZlbnQ+ID0gbmV3IEV2ZW50RW1pdHRlcjxUcmFuc2xhdGlvbkNoYW5nZUV2ZW50PigpO1xuICAgIG9uTGFuZ0NoYW5nZTogRXZlbnRFbWl0dGVyPExhbmdDaGFuZ2VFdmVudD4gPSBuZXcgRXZlbnRFbWl0dGVyPExhbmdDaGFuZ2VFdmVudD4oKTtcbiAgICBvbkRlZmF1bHRMYW5nQ2hhbmdlOiBFdmVudEVtaXR0ZXI8RGVmYXVsdExhbmdDaGFuZ2VFdmVudD4gPSBuZXcgRXZlbnRFbWl0dGVyPERlZmF1bHRMYW5nQ2hhbmdlRXZlbnQ+KCk7XG5cbiAgICBkZWZhdWx0TGFuZyA9ICcnO1xuXG4gICAgY3VycmVudExhbmcgPSAnJztcblxuICAgIGxhbmdzID0gW107XG5cbiAgICBwdWJsaWMgZ2V0UGFyc2VkUmVzdWx0KHRyYW5zbGF0aW9uczogYW55LCBrZXk6IGFueSwgaW50ZXJwb2xhdGVQYXJhbXM/OiBPYmplY3QpOiBhbnkge1xuICAgICAgICByZXR1cm4ga2V5O1xuICAgIH1cblxuICAgIHB1YmxpYyBnZXQoa2V5OiBzdHJpbmcgfCBBcnJheTxzdHJpbmc+LCBpbnRlcnBvbGF0ZVBhcmFtcz86IE9iamVjdCk6IE9ic2VydmFibGU8c3RyaW5nIHwgYW55PiB7XG4gICAgICAgIGNvbnN0IHYgPSBsb29rdXBEZWVwbHkodGhpcy5fZGljdCwga2V5LCBpbnRlcnBvbGF0ZVBhcmFtcyk7XG4gICAgICAgIHJldHVybiBvZih2KTtcbiAgICB9XG5cbiAgICBwdWJsaWMgbG9hZFJlc291cmNlcyhyZXNvdXJjZXM6IHsgW2tleTogc3RyaW5nXTogYW55IH0pIHtcbiAgICAgICAgLy8gdG9kbzogQSBiZXR0ZXIgaW1wbGVtZW50YXRpb25cbiAgICAgICAgT2JqZWN0LmFzc2lnbih0aGlzLl9kaWN0LCByZXNvdXJjZXMpO1xuICAgIH1cbn1cbiJdfQ==