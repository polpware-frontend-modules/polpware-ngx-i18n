{"version":3,"sources":["ng://@polpware/ngx-i18n/lib/services/resource-loader.service.ts","ng://@polpware/ngx-i18n/lib/services/ngx-translator-impl.service.ts","ng://@polpware/ngx-i18n/lib/services/utils.ts","ng://@polpware/ngx-i18n/lib/services/hyper-translator.pipe.ts","ng://@polpware/ngx-i18n/lib/ngx-i18n.module.ts"],"names":["_","externalInterface.underscore","ResourceLoaderService","ngZone","cache","SlidingExpirationCache","this","_resourceLoader","ResourceLoader","Object","defineProperty","prototype","loadPromise","langCode","filter","resourceLoader","getPromise","id","then","resolvedOptionsUrl","loadJsonUriP","resolvedOptions","options","lang","entry","find","e","code","substring","resolvedLangCode","Error","filteredLangCode","resolvedUrlTmpl","replace","resolvedUrl","resolvedData","I18n","add","items","recycleOthers","loadOptionPromise","core","ɵɵinject","NgZone","factory","ɵfac","NgxTranslatorImplService","_dict","onTranslationChange","EventEmitter","onLangChange","onDefaultLangChange","defaultLang","currentLang","langs","getParsedResult","translations","key","interpolateParams","get","ks","split","a","res","i","length","c","undefined","v","of","loadResources","resources","assign","equals","o1","o2","keySet","t1","Array","isArray","create","isDefined","value","HyperTranslatePipe","translate","_ref","lastKey","lastParams","updateValue","_this","onTranslation","markForCheck","isObservable","subscribe","transform","query","args","_i","arguments","validArgs","JSON","parse","SyntaxError","_dispose","event","unsubscribe","ngOnDestroy","ɵɵdirectiveInject","ɵɵinjectPipeChangeDetectorRef","pure","NgxI18nModule","imports","CommonModule","declarations","exports"],"mappings":"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","sourcesContent":["import { Injectable, NgZone } from '@angular/core';\r\n\r\nimport * as externalInterface from '@polpware/fe-dependencies';\r\nimport { replace } from '@polpware/fe-utilities';\r\n\r\nimport { loadJsonUriP } from '@polpware/fe-data';\r\nimport { I18n } from '@polpware/fe-data';\r\nimport { ResourceLoader } from '@polpware/fe-data';\r\n\r\nimport {\r\n    ISlidingExpireCache\r\n} from '@polpware/fe-data';\r\nimport {\r\n    SlidingExpirationCache\r\n} from '@polpware/fe-data';\r\n\r\nconst _ = externalInterface.underscore;\r\n\r\ninterface ILangOptionEntry {\r\n    code: string;\r\n    text: string;\r\n}\r\n\r\n/**\r\n * Verify if the given lang is valid. If the given lang is not valid,\r\n * this function returns a default one.\r\n * @private\r\n * @function validate\r\n * @param {Object} options The avaliable lang options.\r\n * @param {String} lang The requested lang code.\r\n * @returns {String} Verified lang code.\r\n */\r\nfunction validate(options: Array<ILangOptionEntry>, code: string) {\r\n    let lang = code || 'en-us';\r\n    const entry = _.find(options, e => e.code.substring(0, 2) === lang.substring(0, 2));\r\n    if (entry) {\r\n        lang = entry.code;\r\n    }\r\n\r\n    return lang;\r\n}\r\n\r\n\r\n@Injectable()\r\nexport class ResourceLoaderService {\r\n\r\n    private _resourceLoader: ResourceLoader;\r\n\r\n    constructor(ngZone: NgZone) {\r\n        const cache = new SlidingExpirationCache<any>(3 * 60, 5 * 60, ngZone);\r\n        this._resourceLoader = new ResourceLoader(cache);\r\n    }\r\n\r\n    public get resourceLoader() {\r\n        return this._resourceLoader;\r\n    }\r\n\r\n    /**\r\n     * Loads the dictionary for the given lang code.\r\n     * @function loadPromise\r\n     * @param {String} langCode The requested language code.\r\n     * @param {String}[] filter The optional language code which we are not interested in.\r\n     * @returns {Promise} The promise with the state of the loaded language dictionary.\r\n     * @throws {Error}\r\n     */\r\n    loadPromise(langCode: string, filter: string) {\r\n        const resourceLoader = this._resourceLoader;\r\n        return resourceLoader.getPromise<string>('lang.options', id => id)\r\n            .then(function(resolvedOptionsUrl) {\r\n                return loadJsonUriP(resolvedOptionsUrl);\r\n            })\r\n            .then(function(resolvedOptions) {\r\n                return validate(resolvedOptions, langCode);\r\n            })\r\n            .then(function(resolvedLangCode) {\r\n                if (resolvedLangCode === filter) {\r\n                    throw new Error('Loading the current language: ' + resolvedLangCode);\r\n                }\r\n                return resolvedLangCode;\r\n            })\r\n            .then(function(filteredLangCode) {\r\n                langCode = filteredLangCode;\r\n                return resourceLoader.getPromise<string>('lang.urlTmpl', id => id);\r\n            })\r\n            .then(function(resolvedUrlTmpl) {\r\n                return replace(resolvedUrlTmpl, { code: langCode });\r\n            })\r\n            .then(function(resolvedUrl) {\r\n                return loadJsonUriP(resolvedUrl);\r\n            })\r\n            .then(function(resolvedData) {\r\n                I18n.add(resolvedData.code, resolvedData.items);\r\n                I18n.recycleOthers(resolvedData.code);\r\n                return resolvedData;\r\n            });\r\n    }\r\n\r\n    /**\r\n     * Load lang options\r\n     * @function loadOptionPromise\r\n     * @returns {Promise}\r\n     */\r\n    loadOptionPromise() {\r\n        return this._resourceLoader.getPromise('lang.options', id => id)\r\n            .then(function(resolvedOptionsUrl) {\r\n                return loadJsonUriP(resolvedOptionsUrl);\r\n            });\r\n    }\r\n}\r\n","import { EventEmitter } from \"@angular/core\";\nimport { Observable, of } from \"rxjs\";\nimport { DefaultLangChangeEvent, INgxTranslator, LangChangeEvent, TranslationChangeEvent } from '../interfaces/ngx-translator.interface';\n\n\n/* On purpose we do not make it injectable. \n   It is up to the host to define how to do this */\n\nexport class NgxTranslatorImplService implements INgxTranslator {\n\n\n    private _dict: { [key: string]: any } = {};\n\n    onTranslationChange: EventEmitter<TranslationChangeEvent> = new EventEmitter<TranslationChangeEvent>();\n    onLangChange: EventEmitter<LangChangeEvent> = new EventEmitter<LangChangeEvent>();\n    onDefaultLangChange: EventEmitter<DefaultLangChangeEvent> = new EventEmitter<DefaultLangChangeEvent>();\n\n    defaultLang = '';\n\n    currentLang = '';\n\n    langs = [];\n\n    public getParsedResult(translations: any, key: any, interpolateParams?: Object): any {\n        return key;\n    }\n\n    public get(key: string | Array<string>, interpolateParams?: Object): Observable<string | any> {\n        // Get\n        let ks: Array<string> = [];\n        if (typeof key == 'string') {\n            ks = key.split('.');\n        } else {\n            ks = key as Array<string>;\n        }\n\n        ks = ks.filter(a => a);\n\n        let res = this._dict;\n        for (let i = 0; i < ks.length; i++) {\n            const c = ks[i];\n            if (res[c]) {\n                res = res[c];\n            }\n            else {\n                res = undefined;\n                break;\n            }\n        }\n\n        const v = res !== undefined ? res : key;\n        return of(v);\n    }\n\n    public loadResources(resources: { [key: string]: any }) {\n        // todo: A better implementation\n        Object.assign(this._dict, resources);\n    }\n}\n","/* tslint:disable */\r\n/**\r\n * Determines if two objects or two values are equivalent.\r\n *\r\n * Two objects or values are considered equivalent if at least one of the following is true:\r\n *\r\n * * Both objects or values pass `===` comparison.\r\n * * Both objects or values are of the same type and all of their properties are equal by\r\n *   comparing them with `equals`.\r\n *\r\n * @param o1 Object or value to compare.\r\n * @param o2 Object or value to compare.\r\n * @returns true if arguments are equal.\r\n */\r\nexport function equals(o1: any, o2: any): boolean {\r\n    if (o1 === o2) return true;\r\n    if (o1 === null || o2 === null) return false;\r\n    if (o1 !== o1 && o2 !== o2) return true; // NaN === NaN\r\n    let t1 = typeof o1, t2 = typeof o2, length: number, key: any, keySet: any;\r\n    if (t1 == t2 && t1 == 'object') {\r\n        if (Array.isArray(o1)) {\r\n            if (!Array.isArray(o2)) return false;\r\n            if ((length = o1.length) == o2.length) {\r\n                for (key = 0; key < length; key++) {\r\n                    if (!equals(o1[key], o2[key])) return false;\r\n                }\r\n                return true;\r\n            }\r\n        } else {\r\n            if (Array.isArray(o2)) {\r\n                return false;\r\n            }\r\n            keySet = Object.create(null);\r\n            for (key in o1) {\r\n                if (!equals(o1[key], o2[key])) {\r\n                    return false;\r\n                }\r\n                keySet[key] = true;\r\n            }\r\n            for (key in o2) {\r\n                if (!(key in keySet) && typeof o2[key] !== 'undefined') {\r\n                    return false;\r\n                }\r\n            }\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}\r\n/* tslint:enable */\r\n\r\nexport function isDefined(value: any): boolean {\r\n    return typeof value !== 'undefined' && value !== null;\r\n}\r\n\r\nexport function isObject(item: any): boolean {\r\n    return (item && typeof item === 'object' && !Array.isArray(item));\r\n}\r\n\r\nexport function mergeDeep(target: any, source: any): any {\r\n    let output = Object.assign({}, target);\r\n    if (isObject(target) && isObject(source)) {\r\n        Object.keys(source).forEach((key: any) => {\r\n            if (isObject(source[key])) {\r\n                if (!(key in target)) {\r\n                    Object.assign(output, { [key]: source[key] });\r\n                } else {\r\n                    output[key] = mergeDeep(target[key], source[key]);\r\n                }\r\n            } else {\r\n                Object.assign(output, { [key]: source[key] });\r\n            }\r\n        });\r\n    }\r\n    return output;\r\n}\r\n","import { ChangeDetectorRef, Injectable, OnDestroy, Pipe, PipeTransform } from '@angular/core';\r\nimport { isObservable, Subscription } from 'rxjs';\r\nimport { LangChangeEvent, TranslationChangeEvent } from '../interfaces/ngx-translator.interface';\r\nimport { NgxTranslatorImplService } from './ngx-translator-impl.service';\r\nimport { equals, isDefined } from './utils';\r\n\r\n@Injectable()\r\n@Pipe({\r\n    name: 'hyperTrans',\r\n    pure: false // required to update the value when the promise is resolved\r\n})\r\nexport class HyperTranslatePipe implements PipeTransform, OnDestroy {\r\n    value: string = '';\r\n    lastKey: string | null = null;\r\n    lastParams: any[] = [];\r\n    onTranslationChange: Subscription | undefined;\r\n    onLangChange: Subscription | undefined;\r\n    onDefaultLangChange: Subscription | undefined;\r\n\r\n    constructor(private translate: NgxTranslatorImplService, private _ref: ChangeDetectorRef) {\r\n    }\r\n\r\n    updateValue(key: string, interpolateParams?: Object, translations?: any): void {\r\n        let onTranslation = (res: string) => {\r\n            this.value = res !== undefined ? res : key;\r\n            this.lastKey = key;\r\n            this._ref.markForCheck();\r\n        };\r\n        if (translations) {\r\n            let res = this.translate.getParsedResult(translations, key, interpolateParams);\r\n            if (isObservable(res.subscribe)) {\r\n                res.subscribe(onTranslation);\r\n            } else {\r\n                onTranslation(res);\r\n            }\r\n        }\r\n        this.translate.get(key, interpolateParams).subscribe(onTranslation);\r\n    }\r\n\r\n    transform(query: string, ...args: any[]): any {\r\n        if (!query || !query.length) {\r\n            return query;\r\n        }\r\n\r\n        // if we ask another time for the same key, return the last value\r\n        if (equals(query, this.lastKey) && equals(args, this.lastParams)) {\r\n            return this.value;\r\n        }\r\n\r\n        let interpolateParams: Object | undefined = undefined;\r\n        if (isDefined(args[0]) && args.length) {\r\n            if (typeof args[0] === 'string' && args[0].length) {\r\n                // we accept objects written in the template such as {n:1}, {'n':1}, {n:'v'}\r\n                // which is why we might need to change it to real JSON objects such as {\"n\":1} or {\"n\":\"v\"}\r\n                let validArgs: string = args[0]\r\n                    .replace(/(\\')?([a-zA-Z0-9_]+)(\\')?(\\s)?:/g, '\"$2\":')\r\n                    .replace(/:(\\s)?(\\')(.*?)(\\')/g, ':\"$3\"');\r\n                try {\r\n                    interpolateParams = JSON.parse(validArgs);\r\n                } catch (e) {\r\n                    throw new SyntaxError(`Wrong parameter in TranslatePipe. Expected a valid Object, received: ${args[0]}`);\r\n                }\r\n            } else if (typeof args[0] === 'object' && !Array.isArray(args[0])) {\r\n                interpolateParams = args[0];\r\n            }\r\n        }\r\n\r\n        // store the query, in case it changes\r\n        this.lastKey = query;\r\n\r\n        // store the params, in case they change\r\n        this.lastParams = args;\r\n\r\n        // set the value\r\n        this.updateValue(query, interpolateParams);\r\n\r\n        // if there is a subscription to onLangChange, clean it\r\n        this._dispose();\r\n\r\n        // subscribe to onTranslationChange event, in case the translations change\r\n        if (!this.onTranslationChange) {\r\n            this.onTranslationChange = this.translate.onTranslationChange.subscribe((event: TranslationChangeEvent) => {\r\n                if (this.lastKey && event.lang === this.translate.currentLang) {\r\n                    this.lastKey = null;\r\n                    this.updateValue(query, interpolateParams, event.translations);\r\n                }\r\n            });\r\n        }\r\n\r\n        // subscribe to onLangChange event, in case the language changes\r\n        if (!this.onLangChange) {\r\n            this.onLangChange = this.translate.onLangChange.subscribe((event: LangChangeEvent) => {\r\n                if (this.lastKey) {\r\n                    this.lastKey = null; // we want to make sure it doesn't return the same value until it's been updated\r\n                    this.updateValue(query, interpolateParams, event.translations);\r\n                }\r\n            });\r\n        }\r\n\r\n        // subscribe to onDefaultLangChange event, in case the default language changes\r\n        if (!this.onDefaultLangChange) {\r\n            this.onDefaultLangChange = this.translate.onDefaultLangChange.subscribe(() => {\r\n                if (this.lastKey) {\r\n                    this.lastKey = null; // we want to make sure it doesn't return the same value until it's been updated\r\n                    this.updateValue(query, interpolateParams);\r\n                }\r\n            });\r\n        }\r\n\r\n        return this.value;\r\n    }\r\n\r\n    /**\r\n     * Clean any existing subscription to change events\r\n     */\r\n    private _dispose(): void {\r\n        if (typeof this.onTranslationChange !== 'undefined') {\r\n            this.onTranslationChange.unsubscribe();\r\n            this.onTranslationChange = undefined;\r\n        }\r\n        if (typeof this.onLangChange !== 'undefined') {\r\n            this.onLangChange.unsubscribe();\r\n            this.onLangChange = undefined;\r\n        }\r\n        if (typeof this.onDefaultLangChange !== 'undefined') {\r\n            this.onDefaultLangChange.unsubscribe();\r\n            this.onDefaultLangChange = undefined;\r\n        }\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        this._dispose();\r\n    }\r\n}\r\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { HyperTranslatePipe } from './services/hyper-translator.pipe';\n\n@NgModule({\n    declarations: [HyperTranslatePipe],\n    imports: [\n        CommonModule,\n    ],\n    exports: [HyperTranslatePipe]\n})\nexport class NgxI18nModule { }\n"]}