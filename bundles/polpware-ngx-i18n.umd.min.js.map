{"version":3,"sources":["ng://@polpware/ngx-i18n/lib/services/utils.ts","ng://@polpware/ngx-i18n/lib/services/ngx-translator-impl.service.ts","ng://@polpware/ngx-i18n/lib/services/hyper-translator.pipe.ts","ng://@polpware/ngx-i18n/lib/ngx-i18n.module.ts"],"names":["equals","o1","o2","length","key","keySet","t1","Array","isArray","Object","create","isDefined","value","lookupDeeply","resources","interpolateParams","ks","split","filter","a","res","i","c","undefined","params","s","replace","join","NgxTranslatorImplService","this","_dict","onTranslationChange","EventEmitter","onLangChange","onDefaultLangChange","defaultLang","currentLang","langs","prototype","getParsedResult","translations","get","v","of","loadResources","assign","HyperTranslatePipe","translate","_ref","lastKey","lastParams","updateValue","_this","onTranslation","markForCheck","isObservable","subscribe","transform","query","args","_i","arguments","validArgs","JSON","parse","e","SyntaxError","_dispose","event","lang","defaultResources","anotherTry","unsubscribe","ngOnDestroy","core","ɵɵdirectiveInject","ɵɵinjectPipeChangeDetectorRef","pure","factory","ɵfac","NgxI18nModule","imports","CommonModule","declarations","exports"],"mappings":"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","sourcesContent":["/* tslint:disable */\r\n/**\r\n * Determines if two objects or two values are equivalent.\r\n *\r\n * Two objects or values are considered equivalent if at least one of the following is true:\r\n *\r\n * * Both objects or values pass `===` comparison.\r\n * * Both objects or values are of the same type and all of their properties are equal by\r\n *   comparing them with `equals`.\r\n *\r\n * @param o1 Object or value to compare.\r\n * @param o2 Object or value to compare.\r\n * @returns true if arguments are equal.\r\n */\r\nexport function equals(o1: any, o2: any): boolean {\r\n    if (o1 === o2) return true;\r\n    if (o1 === null || o2 === null) return false;\r\n    if (o1 !== o1 && o2 !== o2) return true; // NaN === NaN\r\n    let t1 = typeof o1, t2 = typeof o2, length: number, key: any, keySet: any;\r\n    if (t1 == t2 && t1 == 'object') {\r\n        if (Array.isArray(o1)) {\r\n            if (!Array.isArray(o2)) return false;\r\n            if ((length = o1.length) == o2.length) {\r\n                for (key = 0; key < length; key++) {\r\n                    if (!equals(o1[key], o2[key])) return false;\r\n                }\r\n                return true;\r\n            }\r\n        } else {\r\n            if (Array.isArray(o2)) {\r\n                return false;\r\n            }\r\n            keySet = Object.create(null);\r\n            for (key in o1) {\r\n                if (!equals(o1[key], o2[key])) {\r\n                    return false;\r\n                }\r\n                keySet[key] = true;\r\n            }\r\n            for (key in o2) {\r\n                if (!(key in keySet) && typeof o2[key] !== 'undefined') {\r\n                    return false;\r\n                }\r\n            }\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}\r\n/* tslint:enable */\r\n\r\nexport function isDefined(value: any): boolean {\r\n    return typeof value !== 'undefined' && value !== null;\r\n}\r\n\r\nexport function isObject(item: any): boolean {\r\n    return (item && typeof item === 'object' && !Array.isArray(item));\r\n}\r\n\r\nexport function mergeDeep(target: any, source: any): any {\r\n    let output = Object.assign({}, target);\r\n    if (isObject(target) && isObject(source)) {\r\n        Object.keys(source).forEach((key: any) => {\r\n            if (isObject(source[key])) {\r\n                if (!(key in target)) {\r\n                    Object.assign(output, { [key]: source[key] });\r\n                } else {\r\n                    output[key] = mergeDeep(target[key], source[key]);\r\n                }\r\n            } else {\r\n                Object.assign(output, { [key]: source[key] });\r\n            }\r\n        });\r\n    }\r\n    return output;\r\n}\r\n\r\n/**\r\n * Replaces the parameters in the given string. A parameter is delimited by a \r\n * a pair of double braces. E.g., {{name}}\r\n * @param format The given string\r\n * @param params An object defining the values of the parameters in the string. \r\n */\r\nexport function replaceParams(format: string, params: { [key: string]: any }): string {\r\n    /*jslint unparam: true */\r\n    return format.replace(/\\{\\{([a-zA-Z]+)\\}\\}/g, function(s, key) {\r\n        return (typeof params[key] === 'undefined') ? '' : params[key];\r\n    });\r\n}\r\n\r\n/**\r\n * Looks up the given key for its corresponding values\r\n * in the given resources.\r\n * @param resources Resources \r\n * @param key String\r\n * @param interpolateParams The values for the parameters.\r\n */\r\nexport function lookupDeeply(resources: { [key: string]: any }, key: string | Array<string>, interpolateParams?: Object): string {\r\n    // Get\r\n    let ks: Array<string> = [];\r\n    if (typeof key == 'string') {\r\n        ks = key.split('.');\r\n    } else {\r\n        ks = key as Array<string>;\r\n    }\r\n\r\n    ks = ks.filter(a => a);\r\n\r\n    let res = resources;\r\n    for (let i = 0; i < ks.length; i++) {\r\n        const c = ks[i];\r\n        if (res[c]) {\r\n            res = res[c];\r\n        }\r\n        else {\r\n            res = undefined;\r\n            break;\r\n        }\r\n    }\r\n\r\n    let s: string = undefined;\r\n    if (res !== undefined && typeof res == 'string') {\r\n        s = res;\r\n        if (interpolateParams) {\r\n            s = replaceParams(res, interpolateParams);\r\n        }\r\n    }\r\n\r\n    const v = s !== undefined ? s : ks.join('.');\r\n    return v;\r\n}\r\n","import { EventEmitter } from \"@angular/core\";\nimport { Observable, of } from \"rxjs\";\nimport { DefaultLangChangeEvent, INgxTranslator, LangChangeEvent, TranslationChangeEvent } from '../interfaces/ngx-translator.interface';\nimport { lookupDeeply } from './utils';\n\n\n/* On purpose we do not make it injectable. \n   It is up to the host to define how to do this */\n\nexport class NgxTranslatorImplService implements INgxTranslator {\n\n\n    private _dict: { [key: string]: any } = {};\n\n    onTranslationChange: EventEmitter<TranslationChangeEvent> = new EventEmitter<TranslationChangeEvent>();\n    onLangChange: EventEmitter<LangChangeEvent> = new EventEmitter<LangChangeEvent>();\n    onDefaultLangChange: EventEmitter<DefaultLangChangeEvent> = new EventEmitter<DefaultLangChangeEvent>();\n\n    defaultLang = '';\n\n    currentLang = '';\n\n    langs = [];\n\n    public getParsedResult(translations: any, key: any, interpolateParams?: Object): any {\n        return key;\n    }\n\n    public get(key: string | Array<string>, interpolateParams?: Object): Observable<string | any> {\n        const v = lookupDeeply(this._dict, key, interpolateParams);\n        return of(v);\n    }\n\n    public loadResources(resources: { [key: string]: any }) {\n        // todo: A better implementation\n        Object.assign(this._dict, resources);\n    }\n}\n","import { ChangeDetectorRef, Injectable, OnDestroy, Pipe, PipeTransform } from '@angular/core';\r\nimport { isObservable, Subscription } from 'rxjs';\r\nimport { LangChangeEvent, TranslationChangeEvent } from '../interfaces/ngx-translator.interface';\r\nimport { NgxTranslatorImplService } from './ngx-translator-impl.service';\r\nimport { equals, isDefined, lookupDeeply } from './utils';\r\n\r\n@Injectable()\r\n@Pipe({\r\n    name: 'hyperTrans',\r\n    pure: false // required to update the value when the promise is resolved\r\n})\r\nexport class HyperTranslatePipe implements PipeTransform, OnDestroy {\r\n    value: string = '';\r\n    lastKey: string | null = null;\r\n    lastParams: any[] = [];\r\n    onTranslationChange: Subscription | undefined;\r\n    onLangChange: Subscription | undefined;\r\n    onDefaultLangChange: Subscription | undefined;\r\n\r\n    constructor(private translate: NgxTranslatorImplService, private _ref: ChangeDetectorRef) {\r\n    }\r\n\r\n    updateValue(key: string, interpolateParams?: Object, translations?: any): void {\r\n        let onTranslation = (res: string) => {\r\n            this.value = res !== undefined ? res : key;\r\n            this.lastKey = key;\r\n            this._ref.markForCheck();\r\n        };\r\n        if (translations) {\r\n            let res = this.translate.getParsedResult(translations, key, interpolateParams);\r\n            if (isObservable(res.subscribe)) {\r\n                res.subscribe(onTranslation);\r\n            } else {\r\n                onTranslation(res);\r\n            }\r\n        }\r\n        this.translate.get(key, interpolateParams).subscribe(onTranslation);\r\n    }\r\n\r\n    transform(query: string, ...args: any[]): any {\r\n        if (!query || !query.length) {\r\n            return query;\r\n        }\r\n\r\n        // if we ask another time for the same key, return the last value\r\n        if (equals(query, this.lastKey) && equals(args, this.lastParams)) {\r\n            return this.value;\r\n        }\r\n\r\n        let interpolateParams: Object | undefined = undefined;\r\n        if (isDefined(args[0]) && args.length) {\r\n            if (typeof args[0] === 'string' && args[0].length) {\r\n                // we accept objects written in the template such as {n:1}, {'n':1}, {n:'v'}\r\n                // which is why we might need to change it to real JSON objects such as {\"n\":1} or {\"n\":\"v\"}\r\n                let validArgs: string = args[0]\r\n                    .replace(/(\\')?([a-zA-Z0-9_]+)(\\')?(\\s)?:/g, '\"$2\":')\r\n                    .replace(/:(\\s)?(\\')(.*?)(\\')/g, ':\"$3\"');\r\n                try {\r\n                    interpolateParams = JSON.parse(validArgs);\r\n                } catch (e) {\r\n                    throw new SyntaxError(`Wrong parameter in TranslatePipe. Expected a valid Object, received: ${args[0]}`);\r\n                }\r\n            } else if (typeof args[0] === 'object' && !Array.isArray(args[0])) {\r\n                interpolateParams = args[0];\r\n            }\r\n        }\r\n\r\n        // store the query, in case it changes\r\n        this.lastKey = query;\r\n\r\n        // store the params, in case they change\r\n        this.lastParams = args;\r\n\r\n        // set the value\r\n        this.updateValue(query, interpolateParams);\r\n\r\n        // if there is a subscription to onLangChange, clean it\r\n        this._dispose();\r\n\r\n        // subscribe to onTranslationChange event, in case the translations change\r\n        if (!this.onTranslationChange) {\r\n            this.onTranslationChange = this.translate.onTranslationChange.subscribe((event: TranslationChangeEvent) => {\r\n                if (this.lastKey && event.lang === this.translate.currentLang) {\r\n                    this.lastKey = null;\r\n                    this.updateValue(query, interpolateParams, event.translations);\r\n                }\r\n            });\r\n        }\r\n\r\n        // subscribe to onLangChange event, in case the language changes\r\n        if (!this.onLangChange) {\r\n            this.onLangChange = this.translate.onLangChange.subscribe((event: LangChangeEvent) => {\r\n                if (this.lastKey) {\r\n                    this.lastKey = null; // we want to make sure it doesn't return the same value until it's been updated\r\n                    this.updateValue(query, interpolateParams, event.translations);\r\n                }\r\n            });\r\n        }\r\n\r\n        // subscribe to onDefaultLangChange event, in case the default language changes\r\n        if (!this.onDefaultLangChange) {\r\n            this.onDefaultLangChange = this.translate.onDefaultLangChange.subscribe(() => {\r\n                if (this.lastKey) {\r\n                    this.lastKey = null; // we want to make sure it doesn't return the same value until it's been updated\r\n                    this.updateValue(query, interpolateParams);\r\n                }\r\n            });\r\n        }\r\n\r\n        if (this.value == query) {\r\n            if (args.length > 3 && isDefined(args[2]) && typeof args[2] === 'object') {\r\n                const defaultResources: { [key: string]: any } = args[2];\r\n                // Update it\r\n                const anotherTry = lookupDeeply(defaultResources, query, interpolateParams);\r\n                if (anotherTry) {\r\n                    this.value = anotherTry;\r\n                }\r\n            }\r\n        }\r\n\r\n        return this.value;\r\n    }\r\n\r\n    /**\r\n     * Clean any existing subscription to change events\r\n     */\r\n    private _dispose(): void {\r\n        if (typeof this.onTranslationChange !== 'undefined') {\r\n            this.onTranslationChange.unsubscribe();\r\n            this.onTranslationChange = undefined;\r\n        }\r\n        if (typeof this.onLangChange !== 'undefined') {\r\n            this.onLangChange.unsubscribe();\r\n            this.onLangChange = undefined;\r\n        }\r\n        if (typeof this.onDefaultLangChange !== 'undefined') {\r\n            this.onDefaultLangChange.unsubscribe();\r\n            this.onDefaultLangChange = undefined;\r\n        }\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        this._dispose();\r\n    }\r\n}\r\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { HyperTranslatePipe } from './services/hyper-translator.pipe';\n\n@NgModule({\n    declarations: [HyperTranslatePipe],\n    imports: [\n        CommonModule,\n    ],\n    exports: [HyperTranslatePipe]\n})\nexport class NgxI18nModule { }\n"]}